<?php

use Magento_Bridge\Adapters\Product_Adapter_Wordpress;
use Magento_Bridge\Product\Product;
use Magento_Bridge\Product\Product_Fetch;

/**
 * Cache Test
 *
 * @package    Noxgear
 * @subpackage Noxgear
 * @since      2019 Oct
 */
class ProductAdapterWordpressTest extends WP_UnitTestCase {

	protected $adapter;

	public function setUp() {

		/** @var wpdb */
		global $wpdb;

		parent::setUp();
		$this->adapter = new Product_Adapter_Wordpress( 'some-product' );

		$wpdb->insert(
			$wpdb->prefix . Magento_Bridge::BRIDGE_TABLE,
			[
				'sku'           => 'some-product',
				'mage_id'       => 2,
				'name'          => 'Some Product',
				'price'         => 15.09,
				'special_price' => 14.50,
				'type'          => 'simple',
				'related'       => '',
				'cache_time'    => time(),
			]
		);

		$wpdb->insert(
			$wpdb->prefix . Magento_Bridge::BRIDGE_TABLE,
			[
				'sku'           => 'some-expired-product',
				'mage_id'       => 3,
				'name'          => 'Some Expired Product',
				'price'         => 15.09,
				'special_price' => 14.50,
				'type'          => 'simple',
				'related'       => '',
				'cache_time'    => time() - Product_Adapter_Wordpress::CACHE_AGE - 1,
			]
		);

	}

	public function testShouldReturnFalseIfProductDoesNotExist() {

		$adpater = new Product_Adapter_Wordpress( 'some-non-existent-product' );

		$product = $adpater->get_product();

		$this->assertInstanceOf( Product::class, $product );
	}

	public function testShouldReturnProductIfProductDoesExist() {

		$product = $this->adapter->get_product();

		$this->assertInstanceOf( Product::class, $product );

		$this->assertEquals( 2, $product->mage_id );
		$this->assertEquals( 'Some Product', $product->name );
	}

	public function shouldReturnTrueIfCacheIsValid() {
		$this->assertTrue( $this->adapter->is_cache_valid() );
	}

	public function shouldReturnFalseIfCacheIsExpired() {

		$adpater = new Product_Adapter_Wordpress( 'some-expired-product' );

		$this->assertFalse( $adpater->is_cache_valid() );
	}


	public function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}
}
